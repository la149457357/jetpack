import com.sun.org.apache.bcel.internal.generic.Select

import java.lang.ref.WeakReference

// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'mystudy.gradle'
buildscript {
    ext.kotlin_version = '1.4.0'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.0.1"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.0"
        classpath "com.alibaba:arouter-register:1.0.2"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

def info() {
    def rootFiles = new File("app").listRoots()

    rootFiles.each {
        file -> println file.absolutePath
    }
    new File("app").eachFile() {
        file -> println file.getAbsolutePath()
    }
    new File("app").eachFileRecurse() {
        file -> println file.getAbsolutePath()

    }
    def str1 = "Hello";
    def clos = { param -> println "${str1} ${param}" }
    clos.call("World");
    def lst = [1, 2, 3, 4];
    lst.each { println it }
    println("The list will only display those numbers which are divisible by 2")
    lst.each { num -> if (num % 2 == 0) println num }

}

version = '1.0.0'
task printVersion{
    info()
    doFirst {
        println "Before reading the project version"
    }
    doLast {
        println "Version: $version"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir

}
task check(){
    println("111111111111")
}
task build(){
    println("111111111111")
}
task deviceCheck(){
    new File("app").eachFile() {
        file->println file.getAbsolutePath()
    }
    new File("app").eachFileRecurse() {
        file -> println file.getAbsolutePath()
    }

    def rootFiles = new File("app").listRoots()
    rootFiles.each {
        file -> println file.absolutePath
    }
}
//assemble/assembleDebug/assembleRelease：针对每个版本/debug版/Release版创建一个apk。
//　　clean ：清除所有的构建任务的output，包含apk文件
//　　check： 执行Lint检查并且能够在Lint检测到错误后停止运行
//　build ：执行assemble和check
//　　connectedCheck： 在测试机上执行所有测试任务
//　deviceCheck ：执行所有在远程设备上的测试任务
//　installDebug和installRelease :在设备上安装一个Debug/Release版本
